(defpackage 2022-day-9
  (:use :cl :iterate :cl-ppcre :metabang-bind :trivia :trivia.ppcre)
  (:shadowing-import-from :arrow-macros :->>))
(in-package 2022-day-9)

(defun part-1 ()
  (with-open-file (f (asdf:system-relative-pathname :advent-of-code-2022-in-common-lisp "src/2022-day-9.in"))
    (do ((line (read-line f nil nil) (read-line f nil nil))
         (head #c(0 0))
         (tail #c(0 0))
         (visited (make-hash-table :test #'equal)))
        ((null line) (hash-table-count visited))
      (labels ((get-closer ()
                 (when (or (>= (abs (- (realpart head) (realpart tail))) 2)
                           (>= (abs (- (imagpart head) (imagpart tail))) 2))
                  (cond
                    ((= (realpart head)
                        (realpart tail))
                     (if (> (imagpart head) (imagpart tail))
                         (incf tail #c(0 1))
                         (decf tail #c(0 1))))
                    ((= (imagpart head)
                        (imagpart tail))
                     (if (> (realpart head) (realpart tail))
                         (incf tail #c(1 0))
                         (decf tail #c(1 0))))
                    ((> (imagpart head) (imagpart tail))
                     (if (> (realpart head) (realpart tail))
                         (incf tail #c(1 1))
                         (incf tail #c(-1 1))))
                    ((< (imagpart head) (imagpart tail))
                     (if (> (realpart head) (realpart tail))
                         (incf tail #c(1 -1))
                         (incf tail #c(-1 -1))))))))
        (setf (gethash tail visited) t)
        (match line
          ((ppcre "([UDLR]) (\\d+)"
                  (read direction)
                  (read amount))
           (case direction
             (D
              (dotimes (i amount)
                (incf head #c(0 1))
                (get-closer)
                (setf (gethash tail visited) t)))
             (U
              (dotimes (i amount)
                (decf head #c(0 1))
                (get-closer)
                (setf (gethash tail visited) t)))
             (L
              (dotimes (i amount)
                (decf head #c(1 0))
                (get-closer)
                (setf (gethash tail visited) t)))
             (R
              (dotimes (i amount)
                (incf head #c(1 0))
                (get-closer)
                (setf (gethash tail visited) t))))))))))

(defun part-2 ()
  (with-open-file (f (asdf:system-relative-pathname :advent-of-code-2022-in-common-lisp "src/2022-day-9.in"))
    (do ((line (read-line f nil nil) (read-line f nil nil))
         (knots (let ((xs (make-array (list 10))))
                  (dotimes (i 10)
                    (setf (aref xs i) #c(0 0)))
                  xs))
         (visited (make-hash-table :test #'equal)))
        ((null line) (hash-table-count visited))
      (labels ((get-closer ()
                 (iter
                   (for i from 1 below 10)
                   (for knot = #1=(aref knots i))
                   (for p-knot = (aref knots (1- i)))
                   (when (or (>= (abs (- (realpart p-knot) (realpart knot))) 2)
                             (>= (abs (- (imagpart p-knot) (imagpart knot))) 2))
                     (cond
                       ((= (realpart p-knot)
                           (realpart knot))
                        (if (> (imagpart p-knot) (imagpart knot))
                            (incf #1# #c(0 1))
                            (decf #1# #c(0 1))))
                       ((= (imagpart p-knot)
                           (imagpart knot))
                        (if (> (realpart p-knot) (realpart knot))
                            (incf #1# #c(1 0))
                            (decf #1# #c(1 0))))
                       ((> (imagpart p-knot) (imagpart knot))
                        (if (> (realpart p-knot) (realpart knot))
                            (incf #1# #c(1 1))
                            (incf #1# #c(-1 1))))
                       ((< (imagpart p-knot) (imagpart knot))
                        (if (> (realpart p-knot) (realpart knot))
                            (incf #1# #c(1 -1))
                            (incf #1# #c(-1 -1)))))))))
        (setf (gethash (aref knots 9) visited) t)
        (match line
          ((ppcre "([UDLR]) (\\d+)"
                  (read direction)
                  (read amount))
           (case direction
             (D
              (dotimes (i amount)
                (incf (aref knots 0) #c(0 1))
                (get-closer)
                (setf (gethash (aref knots 9) visited) t)))
             (U
              (dotimes (i amount)
                (decf (aref knots 0) #c(0 1))
                (get-closer)
                (setf (gethash (aref knots 9) visited) t)))
             (L
              (dotimes (i amount)
                (decf (aref knots 0) #c(1 0))
                (get-closer)
                (setf (gethash (aref knots 9) visited) t)))
             (R
              (dotimes (i amount)
                (incf (aref knots 0) #c(1 0))
                (get-closer)
                (setf (gethash (aref knots 9) visited) t))))))))))
