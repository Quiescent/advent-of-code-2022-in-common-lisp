(defpackage 2022-day-5
  (:use :cl :iterate :cl-ppcre :metabang-bind :trivia :trivia.ppcre)
  (:shadowing-import-from :arrow-macros :->>)
  (:shadowing-import-from :arrow-macros :->))
(in-package 2022-day-5)

(defun part-1 ()
  (let ((input (with-open-file (f (asdf:system-relative-pathname :advent-of-code-2022-in-common-lisp "src/2022-day-5.in"))
                 (do ((line (read-line f nil nil) (read-line f nil nil))
                      (lines nil))
                     ((null line) (coerce (nreverse lines) 'vector))
                   (push line lines))))
        (stacks (make-array (list 9))))
    (dotimes (i 9)
      (setf (aref stacks i) (list)))
    (dotimes (i 8)
      (dotimes (j 9)
        (let ((crate (-> (aref input (- 7 i))
                       (aref (1+ (* j 4))))))
          (when (not (eq crate #\Space))
            (push crate (aref stacks j))))))
    (dolist (instruction (-> (subseq input 10)
                           (coerce 'list)))
      (match instruction
        ((ppcre "move (\\d+) from (\\d+) to (\\d+)"
                (read x)
                (read from)
                (read to))
         (dotimes (i x)
           (push (pop (aref stacks (1- from)))
                 (aref stacks (1- to)))))))
    (-> (map 'list #'car stacks)
      (coerce 'string))))

(defun part-2 ()
  (let ((input (with-open-file (f (asdf:system-relative-pathname :advent-of-code-2022-in-common-lisp "src/2022-day-5.in"))
                 (do ((line (read-line f nil nil) (read-line f nil nil))
                      (lines nil))
                     ((null line) (coerce (nreverse lines) 'vector))
                   (push line lines))))
        (stacks (make-array (list 9))))
    (dotimes (i 9)
      (setf (aref stacks i) (list)))
    (dotimes (i 8)
      (dotimes (j 9)
        (let ((crate (-> (aref input (- 7 i))
                       (aref (1+ (* j 4))))))
          (when (not (eq crate #\Space))
            (push crate (aref stacks j))))))
    (dolist (instruction (-> (subseq input 10)
                           (coerce 'list)))
      (match instruction
        ((ppcre "move (\\d+) from (\\d+) to (\\d+)"
                (read x)
                (read from)
                (read to))
         (let ((to-move nil))
           (dotimes (i x)
             (push (pop (aref stacks (1- from))) to-move))
           (dotimes (i x)
             (push (pop to-move)
                   (aref stacks (1- to))))))))
    (-> (map 'list #'car stacks)
      (coerce 'string))))
