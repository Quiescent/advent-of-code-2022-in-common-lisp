(defpackage 2022-day-3
  (:use :cl :iterate :cl-ppcre :metabang-bind :trivia :trivia.ppcre)
  (:shadowing-import-from :arrow-macros :->>))
(in-package 2022-day-3)

(defun part-1 ()
  (with-open-file (f (asdf:system-relative-pathname :advent-of-code-2022-in-common-lisp "src/2022-day-3.in"))
    (do ((line (read-line f nil nil) (read-line f nil nil))
         (sum 0))
        ((null line) sum)
      (let ((first-half (subseq line 0 (floor (length line) 2)))
            (second-half (subseq line (floor (length line) 2))))
        (block outer
          (dotimes (i (floor (length line) 2))
           (dotimes (j (floor (length line) 2))
             (when (eq (aref line (print i))
                       (aref line (print (+ j (floor (length line) 2)))))
               (format t "(aref line i): ~a~%" (aref line i))
               (incf sum
                     (print (if (> (char-code (aref line i))
                             (char-code #\a))
                          (1+ (- (char-code (aref line i))
                                 (char-code #\a)))
                          (+ 26 (1+ (- (char-code (aref line i))
                                       (char-code #\A)))))))
               (return-from outer)))))))))

(defun part-2 ()
  (with-open-file (f (asdf:system-relative-pathname :advent-of-code-2022-in-common-lisp "src/2022-day-3.in"))
    (do* ((line (coerce (read-line f nil nil) 'list)
                (coerce (read-line f nil nil) 'list))
          (sum 0)
          (counter 0)
          (chars line))
         ((null line) (progn
                        (format t "(car chars): ~a~%" (car chars))
                        (incf sum
                              (print (if (> (char-code (car chars))
                                            (char-code #\a))
                                         (1+ (- (char-code (car chars))
                                                (char-code #\a)))
                                         (+ 26 (1+ (- (char-code (car chars))
                                                      (char-code #\A)))))))))
      (format t "chars: ~a~%" chars)
      (if (and (= 0 (mod counter 3))
               (/= 0 counter))
          (progn
            (format t "(car line): ~a~%" (car chars))
            (setf chars line))
          (setf chars (intersection (coerce line 'list) chars)))
      (incf counter))))
